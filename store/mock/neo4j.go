// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"database/sql/driver"
	"github.com/johnnadratowski/golang-neo4j-bolt-driver"
	"sync"
	"time"
)

var (
	lockDBPoolMockClose    sync.RWMutex
	lockDBPoolMockOpenPool sync.RWMutex
)

// DBPoolMock is a mock implementation of DBPool.
//
//     func TestSomethingThatUsesDBPool(t *testing.T) {
//
//         // make and configure a mocked DBPool
//         mockedDBPool := &DBPoolMock{
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             OpenPoolFunc: func() (golangNeo4jBoltDriver.Conn, error) {
// 	               panic("TODO: mock out the OpenPool method")
//             },
//         }
//
//         // TODO: use mockedDBPool in code that requires DBPool
//         //       and then make assertions.
//
//     }
type DBPoolMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// OpenPoolFunc mocks the OpenPool method.
	OpenPoolFunc func() (golangNeo4jBoltDriver.Conn, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// OpenPool holds details about calls to the OpenPool method.
		OpenPool []struct {
		}
	}
}

// Close calls CloseFunc.
func (mock *DBPoolMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: DBPoolMock.CloseFunc is nil but DBPool.Close was just called")
	}
	callInfo := struct {
	}{}
	lockDBPoolMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockDBPoolMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedDBPool.CloseCalls())
func (mock *DBPoolMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockDBPoolMockClose.RLock()
	calls = mock.calls.Close
	lockDBPoolMockClose.RUnlock()
	return calls
}

// OpenPool calls OpenPoolFunc.
func (mock *DBPoolMock) OpenPool() (golangNeo4jBoltDriver.Conn, error) {
	if mock.OpenPoolFunc == nil {
		panic("moq: DBPoolMock.OpenPoolFunc is nil but DBPool.OpenPool was just called")
	}
	callInfo := struct {
	}{}
	lockDBPoolMockOpenPool.Lock()
	mock.calls.OpenPool = append(mock.calls.OpenPool, callInfo)
	lockDBPoolMockOpenPool.Unlock()
	return mock.OpenPoolFunc()
}

// OpenPoolCalls gets all the calls that were made to OpenPool.
// Check the length with:
//     len(mockedDBPool.OpenPoolCalls())
func (mock *DBPoolMock) OpenPoolCalls() []struct {
} {
	var calls []struct {
	}
	lockDBPoolMockOpenPool.RLock()
	calls = mock.calls.OpenPool
	lockDBPoolMockOpenPool.RUnlock()
	return calls
}

var (
	lockConnMockBegin           sync.RWMutex
	lockConnMockClose           sync.RWMutex
	lockConnMockExecNeo         sync.RWMutex
	lockConnMockExecPipeline    sync.RWMutex
	lockConnMockPrepareNeo      sync.RWMutex
	lockConnMockPreparePipeline sync.RWMutex
	lockConnMockQueryNeo        sync.RWMutex
	lockConnMockQueryNeoAll     sync.RWMutex
	lockConnMockQueryPipeline   sync.RWMutex
	lockConnMockSetChunkSize    sync.RWMutex
	lockConnMockSetTimeout      sync.RWMutex
)

// ConnMock is a mock implementation of Conn.
//
//     func TestSomethingThatUsesConn(t *testing.T) {
//
//         // make and configure a mocked Conn
//         mockedConn := &ConnMock{
//             BeginFunc: func() (driver.Tx, error) {
// 	               panic("TODO: mock out the Begin method")
//             },
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             ExecNeoFunc: func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
// 	               panic("TODO: mock out the ExecNeo method")
//             },
//             ExecPipelineFunc: func(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error) {
// 	               panic("TODO: mock out the ExecPipeline method")
//             },
//             PrepareNeoFunc: func(query string) (golangNeo4jBoltDriver.Stmt, error) {
// 	               panic("TODO: mock out the PrepareNeo method")
//             },
//             PreparePipelineFunc: func(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error) {
// 	               panic("TODO: mock out the PreparePipeline method")
//             },
//             QueryNeoFunc: func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error) {
// 	               panic("TODO: mock out the QueryNeo method")
//             },
//             QueryNeoAllFunc: func(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error) {
// 	               panic("TODO: mock out the QueryNeoAll method")
//             },
//             QueryPipelineFunc: func(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error) {
// 	               panic("TODO: mock out the QueryPipeline method")
//             },
//             SetChunkSizeFunc: func(in1 uint16)  {
// 	               panic("TODO: mock out the SetChunkSize method")
//             },
//             SetTimeoutFunc: func(in1 time.Duration)  {
// 	               panic("TODO: mock out the SetTimeout method")
//             },
//         }
//
//         // TODO: use mockedConn in code that requires Conn
//         //       and then make assertions.
//
//     }
type ConnMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() (driver.Tx, error)

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ExecNeoFunc mocks the ExecNeo method.
	ExecNeoFunc func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error)

	// ExecPipelineFunc mocks the ExecPipeline method.
	ExecPipelineFunc func(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error)

	// PrepareNeoFunc mocks the PrepareNeo method.
	PrepareNeoFunc func(query string) (golangNeo4jBoltDriver.Stmt, error)

	// PreparePipelineFunc mocks the PreparePipeline method.
	PreparePipelineFunc func(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error)

	// QueryNeoFunc mocks the QueryNeo method.
	QueryNeoFunc func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error)

	// QueryNeoAllFunc mocks the QueryNeoAll method.
	QueryNeoAllFunc func(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error)

	// QueryPipelineFunc mocks the QueryPipeline method.
	QueryPipelineFunc func(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error)

	// SetChunkSizeFunc mocks the SetChunkSize method.
	SetChunkSizeFunc func(in1 uint16)

	// SetTimeoutFunc mocks the SetTimeout method.
	SetTimeoutFunc func(in1 time.Duration)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// ExecNeo holds details about calls to the ExecNeo method.
		ExecNeo []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// ExecPipeline holds details about calls to the ExecPipeline method.
		ExecPipeline []struct {
			// Query is the query argument value.
			Query []string
			// Params is the params argument value.
			Params []map[string]interface{}
		}
		// PrepareNeo holds details about calls to the PrepareNeo method.
		PrepareNeo []struct {
			// Query is the query argument value.
			Query string
		}
		// PreparePipeline holds details about calls to the PreparePipeline method.
		PreparePipeline []struct {
			// Query is the query argument value.
			Query []string
		}
		// QueryNeo holds details about calls to the QueryNeo method.
		QueryNeo []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// QueryNeoAll holds details about calls to the QueryNeoAll method.
		QueryNeoAll []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// QueryPipeline holds details about calls to the QueryPipeline method.
		QueryPipeline []struct {
			// Query is the query argument value.
			Query []string
			// Params is the params argument value.
			Params []map[string]interface{}
		}
		// SetChunkSize holds details about calls to the SetChunkSize method.
		SetChunkSize []struct {
			// In1 is the in1 argument value.
			In1 uint16
		}
		// SetTimeout holds details about calls to the SetTimeout method.
		SetTimeout []struct {
			// In1 is the in1 argument value.
			In1 time.Duration
		}
	}
}

// Begin calls BeginFunc.
func (mock *ConnMock) Begin() (driver.Tx, error) {
	if mock.BeginFunc == nil {
		panic("moq: ConnMock.BeginFunc is nil but Conn.Begin was just called")
	}
	callInfo := struct {
	}{}
	lockConnMockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	lockConnMockBegin.Unlock()
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//     len(mockedConn.BeginCalls())
func (mock *ConnMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	lockConnMockBegin.RLock()
	calls = mock.calls.Begin
	lockConnMockBegin.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *ConnMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: ConnMock.CloseFunc is nil but Conn.Close was just called")
	}
	callInfo := struct {
	}{}
	lockConnMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockConnMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedConn.CloseCalls())
func (mock *ConnMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockConnMockClose.RLock()
	calls = mock.calls.Close
	lockConnMockClose.RUnlock()
	return calls
}

// ExecNeo calls ExecNeoFunc.
func (mock *ConnMock) ExecNeo(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
	if mock.ExecNeoFunc == nil {
		panic("moq: ConnMock.ExecNeoFunc is nil but Conn.ExecNeo was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockConnMockExecNeo.Lock()
	mock.calls.ExecNeo = append(mock.calls.ExecNeo, callInfo)
	lockConnMockExecNeo.Unlock()
	return mock.ExecNeoFunc(query, params)
}

// ExecNeoCalls gets all the calls that were made to ExecNeo.
// Check the length with:
//     len(mockedConn.ExecNeoCalls())
func (mock *ConnMock) ExecNeoCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockConnMockExecNeo.RLock()
	calls = mock.calls.ExecNeo
	lockConnMockExecNeo.RUnlock()
	return calls
}

// ExecPipeline calls ExecPipelineFunc.
func (mock *ConnMock) ExecPipeline(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error) {
	if mock.ExecPipelineFunc == nil {
		panic("moq: ConnMock.ExecPipelineFunc is nil but Conn.ExecPipeline was just called")
	}
	callInfo := struct {
		Query  []string
		Params []map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockConnMockExecPipeline.Lock()
	mock.calls.ExecPipeline = append(mock.calls.ExecPipeline, callInfo)
	lockConnMockExecPipeline.Unlock()
	return mock.ExecPipelineFunc(query, params...)
}

// ExecPipelineCalls gets all the calls that were made to ExecPipeline.
// Check the length with:
//     len(mockedConn.ExecPipelineCalls())
func (mock *ConnMock) ExecPipelineCalls() []struct {
	Query  []string
	Params []map[string]interface{}
} {
	var calls []struct {
		Query  []string
		Params []map[string]interface{}
	}
	lockConnMockExecPipeline.RLock()
	calls = mock.calls.ExecPipeline
	lockConnMockExecPipeline.RUnlock()
	return calls
}

// PrepareNeo calls PrepareNeoFunc.
func (mock *ConnMock) PrepareNeo(query string) (golangNeo4jBoltDriver.Stmt, error) {
	if mock.PrepareNeoFunc == nil {
		panic("moq: ConnMock.PrepareNeoFunc is nil but Conn.PrepareNeo was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockConnMockPrepareNeo.Lock()
	mock.calls.PrepareNeo = append(mock.calls.PrepareNeo, callInfo)
	lockConnMockPrepareNeo.Unlock()
	return mock.PrepareNeoFunc(query)
}

// PrepareNeoCalls gets all the calls that were made to PrepareNeo.
// Check the length with:
//     len(mockedConn.PrepareNeoCalls())
func (mock *ConnMock) PrepareNeoCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockConnMockPrepareNeo.RLock()
	calls = mock.calls.PrepareNeo
	lockConnMockPrepareNeo.RUnlock()
	return calls
}

// PreparePipeline calls PreparePipelineFunc.
func (mock *ConnMock) PreparePipeline(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error) {
	if mock.PreparePipelineFunc == nil {
		panic("moq: ConnMock.PreparePipelineFunc is nil but Conn.PreparePipeline was just called")
	}
	callInfo := struct {
		Query []string
	}{
		Query: query,
	}
	lockConnMockPreparePipeline.Lock()
	mock.calls.PreparePipeline = append(mock.calls.PreparePipeline, callInfo)
	lockConnMockPreparePipeline.Unlock()
	return mock.PreparePipelineFunc(query...)
}

// PreparePipelineCalls gets all the calls that were made to PreparePipeline.
// Check the length with:
//     len(mockedConn.PreparePipelineCalls())
func (mock *ConnMock) PreparePipelineCalls() []struct {
	Query []string
} {
	var calls []struct {
		Query []string
	}
	lockConnMockPreparePipeline.RLock()
	calls = mock.calls.PreparePipeline
	lockConnMockPreparePipeline.RUnlock()
	return calls
}

// QueryNeo calls QueryNeoFunc.
func (mock *ConnMock) QueryNeo(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error) {
	if mock.QueryNeoFunc == nil {
		panic("moq: ConnMock.QueryNeoFunc is nil but Conn.QueryNeo was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockConnMockQueryNeo.Lock()
	mock.calls.QueryNeo = append(mock.calls.QueryNeo, callInfo)
	lockConnMockQueryNeo.Unlock()
	return mock.QueryNeoFunc(query, params)
}

// QueryNeoCalls gets all the calls that were made to QueryNeo.
// Check the length with:
//     len(mockedConn.QueryNeoCalls())
func (mock *ConnMock) QueryNeoCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockConnMockQueryNeo.RLock()
	calls = mock.calls.QueryNeo
	lockConnMockQueryNeo.RUnlock()
	return calls
}

// QueryNeoAll calls QueryNeoAllFunc.
func (mock *ConnMock) QueryNeoAll(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error) {
	if mock.QueryNeoAllFunc == nil {
		panic("moq: ConnMock.QueryNeoAllFunc is nil but Conn.QueryNeoAll was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockConnMockQueryNeoAll.Lock()
	mock.calls.QueryNeoAll = append(mock.calls.QueryNeoAll, callInfo)
	lockConnMockQueryNeoAll.Unlock()
	return mock.QueryNeoAllFunc(query, params)
}

// QueryNeoAllCalls gets all the calls that were made to QueryNeoAll.
// Check the length with:
//     len(mockedConn.QueryNeoAllCalls())
func (mock *ConnMock) QueryNeoAllCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockConnMockQueryNeoAll.RLock()
	calls = mock.calls.QueryNeoAll
	lockConnMockQueryNeoAll.RUnlock()
	return calls
}

// QueryPipeline calls QueryPipelineFunc.
func (mock *ConnMock) QueryPipeline(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error) {
	if mock.QueryPipelineFunc == nil {
		panic("moq: ConnMock.QueryPipelineFunc is nil but Conn.QueryPipeline was just called")
	}
	callInfo := struct {
		Query  []string
		Params []map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockConnMockQueryPipeline.Lock()
	mock.calls.QueryPipeline = append(mock.calls.QueryPipeline, callInfo)
	lockConnMockQueryPipeline.Unlock()
	return mock.QueryPipelineFunc(query, params...)
}

// QueryPipelineCalls gets all the calls that were made to QueryPipeline.
// Check the length with:
//     len(mockedConn.QueryPipelineCalls())
func (mock *ConnMock) QueryPipelineCalls() []struct {
	Query  []string
	Params []map[string]interface{}
} {
	var calls []struct {
		Query  []string
		Params []map[string]interface{}
	}
	lockConnMockQueryPipeline.RLock()
	calls = mock.calls.QueryPipeline
	lockConnMockQueryPipeline.RUnlock()
	return calls
}

// SetChunkSize calls SetChunkSizeFunc.
func (mock *ConnMock) SetChunkSize(in1 uint16) {
	if mock.SetChunkSizeFunc == nil {
		panic("moq: ConnMock.SetChunkSizeFunc is nil but Conn.SetChunkSize was just called")
	}
	callInfo := struct {
		In1 uint16
	}{
		In1: in1,
	}
	lockConnMockSetChunkSize.Lock()
	mock.calls.SetChunkSize = append(mock.calls.SetChunkSize, callInfo)
	lockConnMockSetChunkSize.Unlock()
	mock.SetChunkSizeFunc(in1)
}

// SetChunkSizeCalls gets all the calls that were made to SetChunkSize.
// Check the length with:
//     len(mockedConn.SetChunkSizeCalls())
func (mock *ConnMock) SetChunkSizeCalls() []struct {
	In1 uint16
} {
	var calls []struct {
		In1 uint16
	}
	lockConnMockSetChunkSize.RLock()
	calls = mock.calls.SetChunkSize
	lockConnMockSetChunkSize.RUnlock()
	return calls
}

// SetTimeout calls SetTimeoutFunc.
func (mock *ConnMock) SetTimeout(in1 time.Duration) {
	if mock.SetTimeoutFunc == nil {
		panic("moq: ConnMock.SetTimeoutFunc is nil but Conn.SetTimeout was just called")
	}
	callInfo := struct {
		In1 time.Duration
	}{
		In1: in1,
	}
	lockConnMockSetTimeout.Lock()
	mock.calls.SetTimeout = append(mock.calls.SetTimeout, callInfo)
	lockConnMockSetTimeout.Unlock()
	mock.SetTimeoutFunc(in1)
}

// SetTimeoutCalls gets all the calls that were made to SetTimeout.
// Check the length with:
//     len(mockedConn.SetTimeoutCalls())
func (mock *ConnMock) SetTimeoutCalls() []struct {
	In1 time.Duration
} {
	var calls []struct {
		In1 time.Duration
	}
	lockConnMockSetTimeout.RLock()
	calls = mock.calls.SetTimeout
	lockConnMockSetTimeout.RUnlock()
	return calls
}

var (
	lockRowsMockAll      sync.RWMutex
	lockRowsMockClose    sync.RWMutex
	lockRowsMockColumns  sync.RWMutex
	lockRowsMockMetadata sync.RWMutex
	lockRowsMockNextNeo  sync.RWMutex
)

// RowsMock is a mock implementation of Rows.
//
//     func TestSomethingThatUsesRows(t *testing.T) {
//
//         // make and configure a mocked Rows
//         mockedRows := &RowsMock{
//             AllFunc: func() ([][]interface{}, map[string]interface{}, error) {
// 	               panic("TODO: mock out the All method")
//             },
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             ColumnsFunc: func() []string {
// 	               panic("TODO: mock out the Columns method")
//             },
//             MetadataFunc: func() map[string]interface{} {
// 	               panic("TODO: mock out the Metadata method")
//             },
//             NextNeoFunc: func() ([]interface{}, map[string]interface{}, error) {
// 	               panic("TODO: mock out the NextNeo method")
//             },
//         }
//
//         // TODO: use mockedRows in code that requires Rows
//         //       and then make assertions.
//
//     }
type RowsMock struct {
	// AllFunc mocks the All method.
	AllFunc func() ([][]interface{}, map[string]interface{}, error)

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ColumnsFunc mocks the Columns method.
	ColumnsFunc func() []string

	// MetadataFunc mocks the Metadata method.
	MetadataFunc func() map[string]interface{}

	// NextNeoFunc mocks the NextNeo method.
	NextNeoFunc func() ([]interface{}, map[string]interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// All holds details about calls to the All method.
		All []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Columns holds details about calls to the Columns method.
		Columns []struct {
		}
		// Metadata holds details about calls to the Metadata method.
		Metadata []struct {
		}
		// NextNeo holds details about calls to the NextNeo method.
		NextNeo []struct {
		}
	}
}

// All calls AllFunc.
func (mock *RowsMock) All() ([][]interface{}, map[string]interface{}, error) {
	if mock.AllFunc == nil {
		panic("moq: RowsMock.AllFunc is nil but Rows.All was just called")
	}
	callInfo := struct {
	}{}
	lockRowsMockAll.Lock()
	mock.calls.All = append(mock.calls.All, callInfo)
	lockRowsMockAll.Unlock()
	return mock.AllFunc()
}

// AllCalls gets all the calls that were made to All.
// Check the length with:
//     len(mockedRows.AllCalls())
func (mock *RowsMock) AllCalls() []struct {
} {
	var calls []struct {
	}
	lockRowsMockAll.RLock()
	calls = mock.calls.All
	lockRowsMockAll.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *RowsMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: RowsMock.CloseFunc is nil but Rows.Close was just called")
	}
	callInfo := struct {
	}{}
	lockRowsMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockRowsMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedRows.CloseCalls())
func (mock *RowsMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockRowsMockClose.RLock()
	calls = mock.calls.Close
	lockRowsMockClose.RUnlock()
	return calls
}

// Columns calls ColumnsFunc.
func (mock *RowsMock) Columns() []string {
	if mock.ColumnsFunc == nil {
		panic("moq: RowsMock.ColumnsFunc is nil but Rows.Columns was just called")
	}
	callInfo := struct {
	}{}
	lockRowsMockColumns.Lock()
	mock.calls.Columns = append(mock.calls.Columns, callInfo)
	lockRowsMockColumns.Unlock()
	return mock.ColumnsFunc()
}

// ColumnsCalls gets all the calls that were made to Columns.
// Check the length with:
//     len(mockedRows.ColumnsCalls())
func (mock *RowsMock) ColumnsCalls() []struct {
} {
	var calls []struct {
	}
	lockRowsMockColumns.RLock()
	calls = mock.calls.Columns
	lockRowsMockColumns.RUnlock()
	return calls
}

// Metadata calls MetadataFunc.
func (mock *RowsMock) Metadata() map[string]interface{} {
	if mock.MetadataFunc == nil {
		panic("moq: RowsMock.MetadataFunc is nil but Rows.Metadata was just called")
	}
	callInfo := struct {
	}{}
	lockRowsMockMetadata.Lock()
	mock.calls.Metadata = append(mock.calls.Metadata, callInfo)
	lockRowsMockMetadata.Unlock()
	return mock.MetadataFunc()
}

// MetadataCalls gets all the calls that were made to Metadata.
// Check the length with:
//     len(mockedRows.MetadataCalls())
func (mock *RowsMock) MetadataCalls() []struct {
} {
	var calls []struct {
	}
	lockRowsMockMetadata.RLock()
	calls = mock.calls.Metadata
	lockRowsMockMetadata.RUnlock()
	return calls
}

// NextNeo calls NextNeoFunc.
func (mock *RowsMock) NextNeo() ([]interface{}, map[string]interface{}, error) {
	if mock.NextNeoFunc == nil {
		panic("moq: RowsMock.NextNeoFunc is nil but Rows.NextNeo was just called")
	}
	callInfo := struct {
	}{}
	lockRowsMockNextNeo.Lock()
	mock.calls.NextNeo = append(mock.calls.NextNeo, callInfo)
	lockRowsMockNextNeo.Unlock()
	return mock.NextNeoFunc()
}

// NextNeoCalls gets all the calls that were made to NextNeo.
// Check the length with:
//     len(mockedRows.NextNeoCalls())
func (mock *RowsMock) NextNeoCalls() []struct {
} {
	var calls []struct {
	}
	lockRowsMockNextNeo.RLock()
	calls = mock.calls.NextNeo
	lockRowsMockNextNeo.RUnlock()
	return calls
}
